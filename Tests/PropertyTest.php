<?php

declare(strict_types=1);

/**
 * Contains the PropertyTest class.
 *
 * @copyright   Copyright (c) 2018 Attila Fulop
 * @author      Attila Fulop
 * @license     MIT
 * @since       2018-12-08
 *
 */

namespace Vanilo\Properties\Tests;

use Vanilo\Properties\Models\Property;

class PropertyTest extends TestCase
{
    /** @test */
    public function all_mutable_fields_can_be_mass_assigned()
    {
        $property = Property::create([
            'name' => 'Funkiness',
            'type' => 'text',
            'slug' => 'funkiness',
            'configuration' => ['x' => 'y', 'a' => 'b']
        ]);

        $this->assertEquals('Funkiness', $property->name);
        $this->assertEquals('text', $property->type);
        $this->assertEquals('funkiness', $property->slug);
        $this->assertEquals(['x' => 'y', 'a' => 'b'], $property->configuration);
    }

    /** @test */
    public function all_mutable_fields_can_be_set()
    {
        $property = new Property();

        $property->name = 'Creepiness';
        $property->type = 'number';
        $property->slug = 'creepiness';
        $property->configuration = ['bam' => 'zdish', 'bumm' => 'tsish'];

        $this->assertEquals('Creepiness', $property->name);
        $this->assertEquals('number', $property->type);
        $this->assertEquals('creepiness', $property->slug);

        $cfg = $property->configuration;
        $this->assertIsArray($cfg);
        $this->assertEquals('zdish', $cfg['bam']);
        $this->assertEquals('tsish', $cfg['bumm']);
    }

    /** @test */
    public function slug_is_autogenerated_from_name()
    {
        $property = Property::create([
            'name' => 'Example Property',
            'type' => 'text'
        ]);

        $this->assertEquals('example-property', $property->slug);
    }

    /** @test */
    public function slug_must_be_unique()
    {
        $this->expectExceptionMessageMatches('/UNIQUE constraint failed/');

        $p1 = Property::create([
            'name' => 'Color',
            'type' => 'text',
            'slug' => 'color'
        ]);

        $p2 = Property::create([
            'name' => 'Color',
            'type' => 'text',
            'slug' => 'color'
        ]);

        $this->assertNotEquals($p1->slug, $p2->slug);
    }

    /** @test */
    public function autogenerated_slugs_are_unique()
    {
        $p1 = Property::create([
            'name' => 'RAM Size',
            'type' => 'text'
        ]);

        $p2 = Property::create([
            'name' => 'RAM Size',
            'type' => 'text'
        ]);

        $this->assertNotEquals($p1->slug, $p2->slug);
    }

    /** @test */
    public function it_can_be_retrieved_by_slug_using_the_static_finder_method()
    {
        Property::create([
            'name' => 'RAM Size',
            'slug' => 'ram',
            'type' => 'text',
        ]);

        Property::create([
            'name' => 'Screen Size',
            'slug' => 'screen',
            'type' => 'text',
        ]);

        $ram = Property::findBySlug('ram');
        $screen = Property::findBySlug('screen');

        $this->assertInstanceOf(Property::class, $ram);
        $this->assertEquals('RAM Size', $ram->name);

        $this->assertInstanceOf(Property::class, $screen);
        $this->assertEquals('Screen Size', $screen->name);
    }
}
